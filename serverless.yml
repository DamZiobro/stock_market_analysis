service: stock-market-analysis

provider:
  name: aws
  runtime: python3.10
  region: eu-west-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
        - "states:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::${self:custom.bucketName}"
        - "arn:aws:s3:::${self:custom.bucketName}/*"

plugins:
  - serverless-step-functions
  - serverless-python-requirements

custom:
  bucketName: xmementoit-stock-market-analysis-asdfyuxc
  pythonRequirements:
    dockerizePip: false  # Optional: only necessary if you need to build in an environment identical to AWS Lambda
    usePoetry: true
    slim: true
    strip: true  # Optional: set to true to strip the .so files of debug information
    layer: false  # Optional: if you want to package your dependencies as a Lambda layer

resources:
  Resources:
    DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}

package:
  exclude:
    - node_modules/**
    - docs/**
    - tests/**
    - .venv/**
    - .mypy_cache/**
    - .pytest_cache/**
    - .ruff_cache/**
    - '**/tests/'
    - '**/tests/**'
    - package-lock.json
    - package.json
    - poetry.lock
    - pyproject.toml
    - README.md
    - serverless.yml
    - mkdocs.yml
    - .coverage
    - .coveragerc
    - .requirements.zip

functions:
  fetchData:
    handler: stock_market_analysis.steps.fetchData.handler
    memorySize: 256
  trendAnalysis:
    handler: stock_market_analysis.steps.trendAnalysis.handler
    memorySize: 256
  topPerformers:
    handler: stock_market_analysis.steps.topPerformers.handler
    memorySize: 256
  dividendCaptureAnalysis:
    handler: stock_market_analysis.steps.dividendCaptureAnalysis.handler
    memorySize: 1024
    timeout: 120

stepFunctions:
  stateMachines:
    stockMarketAnalysisWorkflow:
      name: StockMarketAnalysisStateMachine
      definition:
        Comment: "A workflow to process stock market data from Yahoo Finance."
        StartAt: fetchData
        States:
          fetchData:
            Type: Task
            Resource: arn:aws:lambda:eu-west-1:398024481618:function:stock-market-analysis-dev-fetchData
            Next: processDataBatches
          processDataBatches:
            Type: Map
            Iterator:
              StartAt: dividendCaptureAnalysis
              States:
                dividendCaptureAnalysis:
                  Type: Task
                  Resource: arn:aws:lambda:eu-west-1:398024481618:function:stock-market-analysis-dev-dividendCaptureAnalysis
                  Next: trendAnalysis
                trendAnalysis:
                  Type: Task
                  Resource: arn:aws:lambda:eu-west-1:398024481618:function:stock-market-analysis-dev-trendAnalysis
                  Next: topPerformers
                topPerformers:
                  Type: Task
                  Resource: arn:aws:lambda:eu-west-1:398024481618:function:stock-market-analysis-dev-topPerformers
                  End: true
            End: true
